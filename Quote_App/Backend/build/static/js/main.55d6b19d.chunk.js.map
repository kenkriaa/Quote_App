{"version":3,"sources":["stores/UserStore.js","components/LoginForm.js","App.js","reportWebVitals.js","index.js"],"names":["extendObservable","this","loading","isLoggedIn","username","LoginForm","props","state","password","buttondisabled","event","fieldvalue","target","value","fieldName","name","trim","length","setState","a","console","log","fetch","method","headers","body","JSON","stringify","res","json","loginResult","success","UserStore","resetForm","alert","msg","Fragment","Form","className","Group","controlId","Label","Control","type","placeholder","onChange","setInputValue","Check","label","Button","variant","onClick","doLogIn","React","Component","App","result","doLogout","observer","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55d6b19d.chunk.js","sourcesContent":["import { extendObservable } from 'mobx';\n\n/**\n * UserStore\n */\n\nclass UserStore{\n\n    constructor(){\n        extendObservable(this,{\n            loading: true,\n            isLoggedIn: false,\n            username: ''\n        })\n    }\n}\n\nexport default new UserStore();","import React from 'react';\nimport UserStore from '../stores/UserStore';\nimport { flowResult } from 'mobx';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form'\n\n\nclass LoginForm extends React.Component {\n\n  constructor(props){\n    super(props);\n    this.state = {\n      username: '',\n      password: '',\n      buttondisabled: false\n    }\n  }\n\n  setInputValue(event){\n    let fieldvalue = event.target.value;\n    let fieldName = event.target.name;\n    fieldvalue = fieldvalue.trim();\n    if(fieldvalue.length > 12){\n      return;\n    }\n    this.setState({\n      [fieldName]: fieldvalue\n    });\n  }\n\n  resetForm(){\n    this.setState({\n      username: '',\n      password: '',\n      buttondisabled: false\n    })\n  }\n\n  async doLogIn(){\n    console.log('login');\n    if(!this.state.username){\n      return;\n    }\n    if(!this.state.password){\n      return;\n    }\n    this.setState({\n      buttondisabled: true\n    })\n\n    try{\n      let res = await fetch('/login', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          password: this.state.password\n        })\n      });\n\n      let loginResult = await res.json();\n      if(loginResult && loginResult.success){\n        UserStore.isLoggedIn = true;\n        UserStore.username = loginResult.username;\n      }else if(loginResult && loginResult.success === false){\n        this.resetForm();\n        alert(loginResult.msg);\n      }\n\n    }catch(e){\n      console.log(e);\n      this.resetForm();\n    }\n  }\n\n  render() {\n    return ( \n    <React.Fragment>\n      <Form className=\"loginForm\">\n        <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n          <Form.Label>Username</Form.Label>\n          <Form.Control name=\"username\" type=\"text\" placeholder=\"Username\" value={this.state.username ? this.state.username : ''} onChange={(event) => this.setInputValue(event)}/>\n        </Form.Group>\n\n        <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control name=\"password\" type=\"password\" placeholder=\"Password\" value={this.state.password ? this.state.password : ''} onChange={(event) => this.setInputValue(event)}/>\n        </Form.Group>\n        <Form.Group className=\"mb-3\" controlId=\"formBasicCheckbox\">\n          <Form.Check type=\"checkbox\" label=\"Stay logged in\" />\n        </Form.Group>\n        <Button className=\"loginButton\" variant=\"primary\" type=\"button\" onClick={() => this.doLogIn()}>\n          Login\n        </Button>\n      </Form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default LoginForm;","import './App.css';\nimport UserStore from './stores/UserStore';\nimport React from 'react';\nimport LoginForm from './components/LoginForm';\nimport { observer } from 'mobx-react';\nimport Button from 'react-bootstrap/Button';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends React.Component {\n\n  async componentDidMount() {\n    try {\n\n      let res = await fetch('/isLoggedIn', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Headers\": \"Origin, Content-Type, Accept\"\n        }\n      });\n\n      let result = await res.json();\n      console.log('isLoggedIn result: ' + result);\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = true;\n        UserStore.loading = false;\n        UserStore.username = result.username;\n      } else {\n        UserStore.loading = false;\n        UserStore.isLoggedIn = false;\n      }\n\n    } catch (error) {\n      UserStore.loading = false;\n      UserStore.isLoggedIn = false;\n    }\n\n  }\n\n  async doLogout() {\n    try {\n\n      let res = await fetch('/logout', {\n        method: 'post',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n\n      let result = await res.json();\n\n      if (result && result.success) {\n        UserStore.isLoggedIn = false;\n        UserStore.username = '';\n      }\n\n    } catch (error) {\n      console.log(error);\n    }\n\n  }\n\n  render() {\n\n    if(UserStore.loading) {\n      return ( \n        <div className = \"app\" >\n          <div className =\"container\">\n              Loading, please wait...\n          </div>\n        </div>\n      );\n    }\n    else{\n\n      if(UserStore.isLoggedIn){\n        return ( \n          <div className = \"app\" >\n            <div className =\"container\">\n                Welcome {UserStore.username}\n\n              <Button variant=\"primary\" type=\"button\" onClick={() => this.doLogout()}>\n                Logout\n              </Button>\n            </div>\n          </div>\n        );\n      }\n      return ( \n        <div className = \"app\" >\n          <div className='containerforLogin'>\n          \n          <h1> Sign In </h1>\n\n            <LoginForm />\n            </div>\n        </div>\n      );\n    }\n  }\n}\n\nexport default observer(App);","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}